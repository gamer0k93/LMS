import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

/**
 * Created by KOT on 11.02.2016.
 */
public class LearningManagementSystem {
    private static Scanner scn;

    private static Map<Integer, Student> allStudent = new TreeMap<>();
    private static Map<Integer, Trainer> allTrainer = new TreeMap<>();
    private static Map<Integer, Course>  allCourse  = new TreeMap<>();

    public static Map<Integer, Course> getAllCourse() {
        return allCourse;
    }
    public static Map<Integer, Student> getAllStudent() {
        return allStudent;
    }
    public static Map<Integer, Trainer> getAllTrainer() {
        return allTrainer;
    }
    public static void setAllStudent(Map<Integer, Student> allStudent) {
        LearningManagementSystem.allStudent = allStudent;
    }
    public static void setAllTrainer(Map<Integer, Trainer> allTrainer) {
        LearningManagementSystem.allTrainer = allTrainer;
    }
    public static void setAllCourse (Map<Integer, Course> allCourse) {
        LearningManagementSystem.allCourse = allCourse;
    }

    public void startProgram() {
        new SerializationClass().serialization("Storage"); //read a serialization files
        new Consol().newConsole( logon() );
    }

    //  \/ Student && Trainer \/
    private void consolAddNewStudentOrTrainer(Map<Integer, ? extends Person> myMap, String capitalLetter, String smallLetter) {
        o:
        while (true) {
            int idCourse = printById(allCourse, "Enter ID course", "Course", true);

            if (studentsOnTheCourse12(idCourse)) break ;

            System.out.print(   "1. Add existing " + smallLetter + "\n" +
                                "2. Create " + smallLetter + "\n" +
                                "3. Go to the console\n" +
                                "\tPlease, enter the command: ");
            switch (scn.nextLine()) {
                case "1": {
                    showAllName(myMap, capitalLetter);                                               // show name
                    final int ID = printById(myMap, "Enter ID " + smallLetter, capitalLetter, true); //enter id

                    if (myMap.get(ID).getCourse().containsValue(allCourse.get(idCourse))) {          //checks whether there is a student(trainer) on the course
                        printError(myMap.get(ID).toString() + " already recorded on the course " +
                                allCourse.get(idCourse).getName());
                    } else {
                        myMap.get(ID).addCourse(allCourse.get(idCourse));                           //the addition of a

                        if(smallLetter.equals("student"))
                             allCourse.get(idCourse).addStudentsOnCourse(allStudent.get(ID));  // student on the course
                        else allCourse.get(idCourse).addTrainerOnCourse(allTrainer.get(ID));   // trainer on the course

                        System.out.println(myMap.get(ID).toString() + " add in the course of " +
                                allCourse.get(idCourse).getName() + ":");
                        System.out.println(myMap.get(ID).information() + "\n\n");
                    }
                    break;
                }
                case "2": {
                    System.out.println("\n\t-=  create " + smallLetter + " =-");
                    final int ID = nextID(allStudent);                                        // create ID

                    String firstName = enterString(capitalLetter + " first name:\t\t");
                    String lastName = enterString( capitalLetter + " last name:\t\t" );
                    String userName = enterString( capitalLetter + " user name:\t\t" );
                    String password = enterString( capitalLetter + " password:\t\t"  );

                    if(smallLetter.equals("student")) {
                        addNewStudent(ID, firstName, lastName, userName, password);       // addNewStudent
                        allCourse.get(idCourse).addStudentsOnCourse(allStudent.get(ID));  // student on the course
                    } else {
                        addNewTrainer(ID, firstName, lastName, userName, password);       // addNewTrainer
                        allCourse.get(idCourse).addTrainerOnCourse(allTrainer.get(ID));   // trainer on the course
                    }

                    myMap.get(ID).addCourse(allCourse.get(idCourse));                     // addCourse

                    System.out.println("\nNew " + smallLetter + " has been successfully created in the course of " +
                            allCourse.get(idCourse).getName() + ":");
                    System.out.println(myMap.get(ID).information() + "\n\n");
                    break;
                }

                case "3": break ;

                default: {
                    printError("Enter 1 to 3");
                    continue o;
                }
            }
            break;
        }
    }
    private void transferStudentOrTrainer(Map<Integer, ? extends Person> myMap, String smallLetter){
        int idCursStart = printById(allCourse,
                "Enter ID courses for which you want to transfer " + smallLetter, "Course", false); // enter id

        int idPerson;
        if(smallLetter.equals("student"))
            idPerson = printById(allCourse.get(idCursStart).getStudentsOnCourse(),
                    "Enter ID student which you want to transfer", "Student", true); //enter id student
        else idPerson = printById(allCourse.get(idCursStart).getTrainersOnCourse(),
                "Enter ID trainer which you want to transfer", "Trainer", true); //enter id trainer

        System.out.println("You choosed " + myMap.get(idPerson));
        int idCursEnd = printById(allCourse, "Enter ID courses on which you want to " + smallLetter, "Course", false); //enter id

        if(smallLetter.equals("student")) {
            allCourse.get(idCursStart).removeStudentsOnCourse(allStudent.get(idPerson)); //removeStudentsOnCourse
            allCourse.get(idCursEnd).addStudentsOnCourse(allStudent.get(idPerson));   //addStudentsOnCourse
        }else{
            allCourse.get(idCursStart).removeTrainerOnCourse(allTrainer.get(idPerson)); //removeTrainersOnCourse
            allCourse.get(idCursEnd).addTrainerOnCourse(allTrainer.get(idPerson));   //addTrainersOnCourse
        }

        myMap.get(idPerson).removeCourse(allCourse.get(idCursStart)); //removeCourseStudent
        myMap.get(idPerson).addCourse(allCourse.get(idCursEnd)); //addCourseStudent

        System.out.println(smallLetter + " successfully transferred");
    }
    public void addNewStudent(int id, String firstName, String lastName, String userName, String password) {
        allStudent.put(id, new Student(id, firstName, lastName, userName, password, new HashMap<Integer, Course>(),
                new HashMap<String, Map<String, Integer>>()));
    }
    public void addNewTrainer(int id, String firstName, String lastName,  String userName, String password) {
        allTrainer.put(id, new Trainer(id, firstName, lastName, userName, password, new HashMap<Integer, Course>()));
    }

    // \/ Course  \/
    private void consolAddNewCourse() {
        System.out.println("\n\n\t-=  create course =-");
        int id = nextID(allCourse);
        String corseName = enterCourseName();          //check whether there is a course with the same name
        String courseDescription = enterString("Course description:\t");  //add Course description
        GregorianCalendar start = enterData(   "Start date:\t\t\t"    );  //add Start date
        GregorianCalendar end = enterData(     "End date:\t\t\t"      );  //add End date
        addNewCourse(id, corseName, courseDescription, start, end);       //create course
        while (true){
            if(enterDays(id, enterString("Days:\t\t\t\t")))break;
        }
        System.out.println("\nNew course has been successfully created:\n" +
                            allCourse.get(id).information() + "\n\n");
    }
    public void addNewCourse(int id, String corseName, String courseDescription, GregorianCalendar start, GregorianCalendar end) {
        allCourse.put(id, new Course(id, corseName, courseDescription, new HashMap<Integer, Student>(),
                new HashMap<Integer, Trainer>(), start, end, new TreeSet<String>(), new HashSet<Course.Task>()));
    }
    private void showGradebook(){
        int idCurse = printById(allCourse, "Enter ID course gradebook who want to see", "Course", true);

        Course.Task[] arrayTask = allCourse.get(idCurse).getStudentAssessment().toArray(
                new Course.Task[allCourse.get(idCurse).getStudentAssessment().size()]);
        for (Course.Task anArrayTask : arrayTask) {
            System.out.println(anArrayTask.showGradebook());
        }
    }
    private void writeGradebook(){
        int idCurse = printById(allCourse, "Enter ID course gradebook who want to write", "Course", false);
        System.out.print("Enter the file name in which will be recorded gradebook: ");
        String strFile = scn.nextLine().trim();
        if(strFile.equals("") || strFile.equals(" ")) strFile = allCourse.get(idCurse).getName() + "Gradebook";
        Course.Task[] arrayTask = allCourse.get(idCurse).getStudentAssessment().toArray(
                new Course.Task[allCourse.get(idCurse).getStudentAssessment().size()]);

        try (FileWriter writer = new FileWriter("src\\course\\project\\Resources\\" + strFile + ".txt", false)) {

            scn = new Scanner(allCourse.get(idCurse).information());
            while (scn.hasNextLine()) {
                writer.write("\n" + scn.nextLine());
            }

            writer.write("\n");

            for (Course.Task anArrayTask : arrayTask) {
                scn = new Scanner(anArrayTask.showGradebook());
                while (scn.hasNextLine()) {
                    writer.write("\n" + scn.nextLine());
                }
            }

            writer.flush();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }
    private void creationTasks() {
        int idCourse = printById(allCourse, "Enter ID course", "Course", false);
        System.out.println("\t-=  create tasks =-");

        String tasksName;
        o:
        while (true) {
            System.out.print("Tasks name:\t\t\t");
            tasksName = scn.nextLine();
            // \/ check that this name is not the problem \/
            Course.Task[] arrayTask = allCourse.get(idCourse).getStudentAssessment().toArray(
                    new Course.Task[allCourse.get(idCourse).getStudentAssessment().size()]);
            for (Course.Task anArrayTask : arrayTask) {
                if (anArrayTask.getName().equals(tasksName)) {
                    printError("Task with the same name in this course already exists");
                    continue o;
                }
            }
            break;
        }
        System.out.print("Information:\t\t");
        String informationAboutTheJob = scn.nextLine();

        allCourse.get(idCourse).addStudentAssessment(allCourse.get(idCourse)
                .new Task(tasksName, informationAboutTheJob));

        // \/ add students to the task \/
        if(allCourse.get(idCourse).getStudentsOnCourse().size() > 0) {
            Student[] arrStudent = allCourse.get(idCourse).getStudentsOnCourse().values()
                    .toArray(new Student[allCourse.get(idCourse).getStudentsOnCourse().size()]);
            for (Student anArrStudent : arrStudent) {
                    anArrStudent.addStudentTasks(allCourse.get(idCourse).getName(), tasksName, -1);
            }
        }
    }

    // \/ Checks \/
    private boolean studentsOnTheCourse12(int idCourse){
        if (allCourse.get(idCourse).getStudentsOnCourse().size() >= 12) {
            printError("\nOn this course for 12 students select another course!");
            return true;
        } else return false;
    }
    private int nextID(Map map){
        int id = 1;
        while (true) {
            if (map.get(id) != null) id++;
            else return id;
        }
    }
    private MyClass logon(){
        System.out.println( "Welcome to the Learning Management System\n" +
                "Please enter your username and password to login");

        while (true) {
            scn = new Scanner(System.in);
            System.out.print("user name:\t\t");
            String userName = scn.nextLine();
            System.out.print("password:\t\t");
            String password = scn.nextLine();

            if(userName.equals("0k") && password.equals("456")){
                System.out.println("\n\n" + (char)27+"[34m" + "ADMINOOSHKA, i greet in the system" + (char)27+"[0m");
                return new Course("ADMINOOSHKA");    //log in as administrator
            }

            for (Student elem : allStudent.values().toArray(new Student[allStudent.size()]))  //entrance as a student
                if (elem.getUserName().equals(userName) && elem.getPassword().equals(password)) {
                    System.out.println("\n\n" + (char)27+"[34m" + elem.toString() + ", i greet in the system" + (char)27+"[0m");
                    return elem;
                }

            for (Trainer elem : allTrainer.values().toArray(new Trainer[allTrainer.size()]))  //input as a teacher
                if (elem.getUserName().equals(userName) && elem.getPassword().equals(password)){
                    System.out.println("\n\n" + (char)27+"[34m" + elem.toString() + ", i greet in the system" + (char)27+"[0m");
                    return elem;
                }

            printError( "Ssername or password you entered is incorrect\n");
            System.out.println( "1. Try again\n" +
                    "2. Go out" +
                    "\n\tPlease, enter the command: ");
            o:
            while (true) {
                switch (scn.nextLine()) {
                    case "1": break;
                    case "2": System.exit(0);
                    default: {
                        printError("Enter 1 to 2");
                        continue o;
                    }
                }
                break ;
            }
        }
    }
    private GregorianCalendar enterData(String informationToEnter){
        while (true) {
            try {
                System.out.print(informationToEnter);
                String strData = scn.nextLine().trim();
                String[] strArray = strData.replace(",", " ").replace("-", " ").replace(".", " ").replace("  ", " ").split(" ");
                if (strArray[0].length() == 4) return new GregorianCalendar(Integer.valueOf(strArray[0]),
                        Integer.valueOf(strArray[1]), Integer.valueOf(strArray[2]));
                else if (strArray[2].length() == 4) return new GregorianCalendar(Integer.valueOf(strArray[2]),
                        Integer.valueOf(strArray[1]), Integer.valueOf(strArray[0]));
            }catch (Exception e) {
                printError("Date entered, incorrectly enter again!");
            }
        }
    }
    private String enterString(String informationToEnter){
        while (true) {
            System.out.print(informationToEnter);
            String string = scn.nextLine().trim();
            if (string.equals(""))
                printError("You enter the field is empty, try again!");
            else return string;
        }
    }
    private String enterCourseName(){
        String corseName;
        while(true){
            boolean flag = true;
            corseName = enterString("Course name:\t\t");
            Course[] courseArray = allCourse.values().toArray( new Course[ allCourse.values().size()] );
            for(Course elem : courseArray){
                if(elem.getName().equals(corseName)) {
                    printError("Course of the same name exists");
                    flag = false;
                    break;
                }
            }
            if(flag) return corseName;
        }
    }
